# Default values for qycloud.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nginx:
  replicaCount: 1
  image: "dockerhub.aysaas.com/library/aysaas/nginx"
  imageTag: "1.13.7-alpine-2.5.0"
  pullPolicy: Always
  containerPort: 80
  service:
    type: ClusterIP
    port: 80
    # If defined, user can access from internet by any port except 80
    #externalPort: 8040
  resources:
    requests:
      cpu: "50m"
      memory: "10Mi"
    limits:
      cpu: "200m"
      memory: "50Mi"


php:
  withNginx: true
  replicaCount: 1
  image: "dockerhub.aysaas.com/library/aysaas/php"
  imageTag: "7.1-ubuntu14.04-2.5.0"
  pullPolicy: Always
  containerPort: 9000
  env:
    mongo:
      default:
        dbname: master
        user: master
        pass: L9jD7srDBdS7Nfob
      appstore:
        dbname: appstore
        user: appstore
        pass: L9jD7srDBdS7Nfob
      portal:
        dbname: portal
        user: portal
        pass: L9jD7srDBdS7Nfob

    mysqlAppDBName: master
    mysqlAppUser: master
    mysqlAppPass: pZdxysqJX4bK4VrB

    snycSource: false
    saasBranch: master
    orgBranch: master

    verbose: ""
    forceBuild: ""
    debug: ""

  service:
    type: ClusterIP
    port: 80

  resources:
    requests:
      cpu: "50m"
      memory: "100Mi"
    limits:
      cpu: "500m"
      memory: "1000Mi"


node:
  replicaCount: 1
  image: "dockerhub.aysaas.com/library/aysaas/node"
  imageTag: "8.11.1-slim-2.5.0"
  pullPolicy: Always
  containerPort: 5000
  env:
    snycSource: false
    nodeSaasBranch: master
    nodeSaasType: ""
    verbose: ""
    forceBuild: ""
    debug: ""

  service:
    type: ClusterIP
    port: 5000
  resources:
    requests:
      cpu: "50m"
      memory: "300Mi"
    limits:
      cpu: "500m"
      memory: "1000Mi"


source:
  pullPolicy: Always
  saas:
    image: "dockerhub.aysaas.com/library/aysaas/saas"
    imageTag: "2.5.0-master-0866f04c40"
  nodeSaas:
    image: "dockerhub.aysaas.com/library/aysaas/node-saas"
    imageTag: "2.5.0-master-bc4d91ce"
  devTools:
    image: "dockerhub.aysaas.com/library/aysaas/dev-tools"
    imageTag: "2.2.0"
  yarnCache:
    image: "dockerhub.aysaas.com/library/aysaas/yarn-cache"
    imageTag: "2.2.0"


beanstalkd:
  replicaCount: 1
  image: "dockerhub.aysaas.com/library/aysaas/beanstalkd"
  imageTag: "1.10-alpine-1.0.0"
  pullPolicy: Always
  containerPort: 11300
  service:
    type: ClusterIP
    port: 11300
  resources:
    requests:
      cpu: "20m"
      memory: "1Mi"
    limits:
      cpu: "200m"
      memory: "80Mi"


rabbitmq:
  enabled: true
  replicaCount: 1
  image: "dockerhub.aysaas.com/library/rabbitmq"
  imageTag: "3.7.4-management"
  pullPolicy: Always
  env:
    user: guest
    pass: guest
  service:
    type: ClusterIP
    port: 5672
  resources:
    requests:
      cpu: "50m"
      memory: "100Mi"
    limits:
      cpu: "500m"
      memory: "300Mi"


mongo:
  replicaCount: 1
  image: "dockerhub.aysaas.com/library/aysaas/mongo"
  imageTag: "test"
  pullPolicy: Always
  containerPort: 27017
  service:
    type: ClusterIP
    port: 27017
  resources:
    requests:
      cpu: "50m"
      memory: "70Mi"
    limits:
      cpu: "500m"
      memory: "300Mi"


mysql:
  replicaCount: 1
  image: "dockerhub.aysaas.com/library/aysaas/mysql"
  imageTag: "test"
  pullPolicy: Always
  containerPort: 3306
  service:
    type: ClusterIP
    port: 3306
  resources:
    requests:
      cpu: "100m"
      memory: "500Mi"
    limits:
      cpu: "1000m"
      memory: "1256Mi"


redis:
  replicaCount: 1
  image: "dockerhub.aysaas.com/library/aysaas/redis"
  imageTag: "4.0.6-alpine-1.0.0"
  pullPolicy: Always
  containerPort: 6379
  service:
    type: ClusterIP
    port: 6379
  resources:
    requests:
      cpu: "50m"
      memory: "1Mi"
    limits:
      cpu: "200m"
      memory: "50Mi"


persistence:
  enabled: false
   # If defined, PVC must be created manually before volume will be bound
#  existingClaim: "saas-saas"
#  volumes:
#    - name: saas-home
#      emptyDir: {}
  sourceReady: false
  accessMode: ReadWriteMany
  size: 8Gi
  storageClass: "aysaas-nfs"


ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  domain: default.com
  hosts:
    master: www
    static: static
    fileio: fileio
    nodesaas: nodestatic
    xhprof: xhprof
    beanstalk: beanstalk
    rabbitmq: rabbitmq
    mysql: mysql
    redis: redis
    portal: portal

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


imagePullSecrets:
- name: harbor-registry-secret

nodeSelector: {}

tolerations: []

affinity: {}
